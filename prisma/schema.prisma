// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  posts     Post[]   @relation("UserPosts")
  sensors   Sensor[] @relation("UserSensors")
  schedules Schedule[]   @relation("UserSchedules")
  notifications Notification[]   @relation("UserNotifications")
  refreshToken String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  userId    Int
  createdAt DateTime @default(now())

  user      User     @relation("UserPosts", fields: [userId], references: [id])
}

model Sensor {
  id           Int      @id @default(autoincrement())
  name         String
  serialNumber String   @unique
  type         SensorType
  status       SensorStatus @default(ACTIVE)
  description  String
  img          String?
  dateAdded    DateTime  @default(now())
  userId       Int
  createdAt    DateTime  @default(now())

  user         User      @relation("UserSensors", fields: [userId], references: [id])
}

model Schedule {
  id            Int      @id @default(autoincrement())
  title         String
  userId        Int
  description   String?
  startTime     String    // VD: "15:00"
  repeatType    RepeatType
  repeatDays    Int[]     @default([])
  repeatDates   Int[]     @default([])
  jobKeys       String[] @default([])
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  user          User      @relation("UserSchedules",fields: [userId], references: [id])
}

model Notification {
  id          Int       @id @default(autoincrement())
  userId      Int
  title       String
  description String
  isRead      Boolean   @default(false)
  createdAt   DateTime  @default(now())

  user        User      @relation("UserNotifications",fields: [userId], references: [id])
}

enum RepeatType {
  DAILY
  WEEKLY
  MONTHLY
}

enum SensorType {
  TEMPERATURE
  HUMIDITY
  TEMPERATURE_HUMIDITY
}

enum SensorStatus {
  ACTIVE
  INACTIVE
}
